// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskManager.Dal;

namespace TaskManager.Dal.Migrations
{
    [DbContext(typeof(TaskManagerDbContext))]
    [Migration("20200515141657_UnitId")]
    partial class UnitId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:Enum:Status", "Open,InProgress,Closed,None")
                .HasAnnotation("Npgsql:Enum:UnitType", "Comment,Milestone,Project,Task,SubTask")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<int>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TaskManager.Entities.Tables.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "cda9194a-63f5-4643-afdd-78006aefd74b",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "cda9194a-63f5-4643-afdd-78006aefd74b",
                            Name = "Developer",
                            NormalizedName = "DEVELOPER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "cda9194a-63f5-4643-afdd-78406aefd74b",
                            Name = "Maintainer",
                            NormalizedName = "MAINTAINER"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "cda9194a-63f5-4643-afdd-78406aefd74b",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        });
                });

            modelBuilder.Entity("TaskManager.Entities.Tables.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cda9194a-63f5-4643-afdd-78006aefd74b",
                            Email = "devidshylyuk85@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "David",
                            NormalizedEmail = "DEVIDSHYLYUK85@GMAIL.COM",
                            NormalizedUserName = "DAVID",
                            PasswordHash = "AQAAAAEAACcQAAAAEJMqefM3jQQE7sOvJCM73AKmMaFQqF0t01IbCdmU+x7KcgHlBoETO6+XXtvJ+wB9UA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9819F4B5-F389-4603-BF0B-1E3C88379627",
                            TwoFactorEnabled = false,
                            UserName = "@devich"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cda9194a-63f5-4643-afdd-78006aefd74b",
                            Email = "olarevun23@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Ola",
                            NormalizedEmail = "OLAREVUN23@GMAIL.COM",
                            NormalizedUserName = "OLA",
                            PasswordHash = "AQAAAAEAACcQAAAAELhW7WoGTkP1aZcDoN5qwgHILFMMak47gnjEKYQ0YBgcEitvLKiKmpoXYliqdFfMVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9819F4B5-F389-4603-BF0B-1E3C88379627",
                            TwoFactorEnabled = false,
                            UserName = "@olga"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cda9194a-63f5-4643-afdd-78006aefd74b",
                            Email = "olegrevun23@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Oleg",
                            NormalizedEmail = "OLEGREVUN23@GMAIL.COM",
                            NormalizedUserName = "OLEG",
                            PasswordHash = "AQAAAAEAACcQAAAAELhW7WoGTkP1aZcDoN5qwgHILFMMak47gnjEKYQ0YBgcEitvLKiKmpoXYliqdFfMVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9819F4B5-F389-4603-BF0B-1E3C88379627",
                            TwoFactorEnabled = false,
                            UserName = "@olegka"
                        });
                });

            modelBuilder.Entity("TaskManager.Entities.Tables.Permission", b =>
                {
                    b.Property<int>("ProjectMemberId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProjectMemberId1")
                        .HasColumnType("integer");

                    b.HasKey("ProjectMemberId", "RoleId");

                    b.HasIndex("ProjectMemberId1");

                    b.HasIndex("RoleId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            ProjectMemberId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            ProjectMemberId = 10,
                            RoleId = 3
                        },
                        new
                        {
                            ProjectMemberId = 15,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("TaskManager.Entities.Tables.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Members")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectManagerId")
                        .HasColumnType("integer");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectManagerId");

                    b.HasIndex("UnitId")
                        .IsUnique();

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Members = 3,
                            ProjectManagerId = 3,
                            UnitId = 20
                        });
                });

            modelBuilder.Entity("TaskManager.Entities.Tables.ProjectMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectMembers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProjectId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            ProjectId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 15,
                            ProjectId = 1,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("TaskManager.Entities.Tables.RelationShip", b =>
                {
                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.Property<int>("ParentUnitId")
                        .HasColumnType("integer");

                    b.HasKey("UnitId", "ParentUnitId");

                    b.HasIndex("ParentUnitId");

                    b.ToTable("RelationShips");

                    b.HasData(
                        new
                        {
                            UnitId = 25,
                            ParentUnitId = 5
                        },
                        new
                        {
                            UnitId = 26,
                            ParentUnitId = 5
                        },
                        new
                        {
                            UnitId = 40,
                            ParentUnitId = 4
                        },
                        new
                        {
                            UnitId = 41,
                            ParentUnitId = 5
                        },
                        new
                        {
                            UnitId = 42,
                            ParentUnitId = 5
                        });
                });

            modelBuilder.Entity("TaskManager.Entities.Tables.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("TextValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TextValue = "InProgress"
                        },
                        new
                        {
                            Id = 2,
                            TextValue = "Self-test"
                        },
                        new
                        {
                            Id = 3,
                            TextValue = "Adminka"
                        },
                        new
                        {
                            Id = 4,
                            TextValue = "Done"
                        },
                        new
                        {
                            Id = 5,
                            TextValue = "Blocked"
                        },
                        new
                        {
                            Id = 6,
                            TextValue = "CodeReview"
                        },
                        new
                        {
                            Id = 7,
                            TextValue = "Frontend"
                        },
                        new
                        {
                            Id = 8,
                            TextValue = "Backend"
                        },
                        new
                        {
                            Id = 9,
                            TextValue = "Backlog"
                        },
                        new
                        {
                            Id = 10,
                            TextValue = "Testing"
                        });
                });

            modelBuilder.Entity("TaskManager.Entities.Tables.TagOnTask", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.HasKey("TagId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("TagOnTasks");

                    b.HasData(
                        new
                        {
                            TagId = 5,
                            TaskId = 1
                        },
                        new
                        {
                            TagId = 8,
                            TaskId = 1
                        },
                        new
                        {
                            TagId = 9,
                            TaskId = 1
                        },
                        new
                        {
                            TagId = 1,
                            TaskId = 2
                        },
                        new
                        {
                            TagId = 8,
                            TaskId = 2
                        },
                        new
                        {
                            TagId = 6,
                            TaskId = 3
                        },
                        new
                        {
                            TagId = 8,
                            TaskId = 3
                        },
                        new
                        {
                            TagId = 4,
                            TaskId = 4
                        },
                        new
                        {
                            TagId = 8,
                            TaskId = 4
                        },
                        new
                        {
                            TagId = 1,
                            TaskId = 5
                        },
                        new
                        {
                            TagId = 10,
                            TaskId = 5
                        });
                });

            modelBuilder.Entity("TaskManager.Entities.Tables.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AssignedId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignedId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UnitId")
                        .IsUnique();

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProjectId = 1,
                            UnitId = 1
                        },
                        new
                        {
                            Id = 2,
                            AssignedId = 1,
                            ProjectId = 1,
                            UnitId = 2
                        },
                        new
                        {
                            Id = 3,
                            AssignedId = 1,
                            ProjectId = 1,
                            UnitId = 3
                        },
                        new
                        {
                            Id = 4,
                            AssignedId = 2,
                            ProjectId = 1,
                            UnitId = 4
                        },
                        new
                        {
                            Id = 5,
                            AssignedId = 2,
                            ProjectId = 1,
                            UnitId = 5
                        });
                });

            modelBuilder.Entity("TaskManager.Entities.Tables.TermInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset?>("DueTs")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("StartTs")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UnitId")
                        .IsUnique();

                    b.ToTable("TermInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DueTs = new DateTimeOffset(new DateTime(2020, 5, 25, 12, 40, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, -2, 0, 0, 0)),
                            StartTs = new DateTimeOffset(new DateTime(2020, 5, 15, 17, 16, 56, 856, DateTimeKind.Unspecified).AddTicks(5566), new TimeSpan(0, 3, 0, 0, 0)),
                            Status = 0,
                            UnitId = 1
                        },
                        new
                        {
                            Id = 2,
                            DueTs = new DateTimeOffset(new DateTime(2020, 5, 30, 12, 40, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, -2, 0, 0, 0)),
                            StartTs = new DateTimeOffset(new DateTime(2020, 5, 15, 17, 16, 56, 859, DateTimeKind.Unspecified).AddTicks(5065), new TimeSpan(0, 3, 0, 0, 0)),
                            Status = 1,
                            UnitId = 2
                        },
                        new
                        {
                            Id = 3,
                            DueTs = new DateTimeOffset(new DateTime(2020, 5, 27, 12, 40, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, -2, 0, 0, 0)),
                            StartTs = new DateTimeOffset(new DateTime(2020, 5, 15, 17, 16, 56, 859, DateTimeKind.Unspecified).AddTicks(5165), new TimeSpan(0, 3, 0, 0, 0)),
                            Status = 1,
                            UnitId = 3
                        },
                        new
                        {
                            Id = 4,
                            DueTs = new DateTimeOffset(new DateTime(2020, 5, 26, 12, 40, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, -2, 0, 0, 0)),
                            StartTs = new DateTimeOffset(new DateTime(2020, 5, 15, 17, 16, 56, 859, DateTimeKind.Unspecified).AddTicks(5177), new TimeSpan(0, 3, 0, 0, 0)),
                            Status = 1,
                            UnitId = 4
                        },
                        new
                        {
                            Id = 5,
                            DueTs = new DateTimeOffset(new DateTime(2020, 5, 23, 12, 40, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, -2, 0, 0, 0)),
                            StartTs = new DateTimeOffset(new DateTime(2020, 5, 15, 17, 16, 56, 859, DateTimeKind.Unspecified).AddTicks(5185), new TimeSpan(0, 3, 0, 0, 0)),
                            Status = 2,
                            UnitId = 5
                        },
                        new
                        {
                            Id = 20,
                            DueTs = new DateTimeOffset(new DateTime(2020, 6, 23, 12, 40, 40, 0, DateTimeKind.Unspecified), new TimeSpan(0, -2, 0, 0, 0)),
                            StartTs = new DateTimeOffset(new DateTime(2020, 5, 15, 17, 16, 56, 859, DateTimeKind.Unspecified).AddTicks(5197), new TimeSpan(0, 3, 0, 0, 0)),
                            Status = 1,
                            UnitId = 20
                        },
                        new
                        {
                            Id = 25,
                            StartTs = new DateTimeOffset(new DateTime(2020, 5, 15, 17, 16, 56, 859, DateTimeKind.Unspecified).AddTicks(5205), new TimeSpan(0, 3, 0, 0, 0)),
                            Status = 1,
                            UnitId = 25
                        },
                        new
                        {
                            Id = 26,
                            StartTs = new DateTimeOffset(new DateTime(2020, 5, 15, 17, 16, 56, 859, DateTimeKind.Unspecified).AddTicks(5212), new TimeSpan(0, 3, 0, 0, 0)),
                            Status = 2,
                            UnitId = 26
                        },
                        new
                        {
                            Id = 40,
                            StartTs = new DateTimeOffset(new DateTime(2020, 5, 15, 17, 16, 56, 859, DateTimeKind.Unspecified).AddTicks(5218), new TimeSpan(0, 3, 0, 0, 0)),
                            Status = 3,
                            UnitId = 40
                        },
                        new
                        {
                            Id = 41,
                            StartTs = new DateTimeOffset(new DateTime(2020, 5, 15, 17, 16, 56, 859, DateTimeKind.Unspecified).AddTicks(5226), new TimeSpan(0, 3, 0, 0, 0)),
                            Status = 3,
                            UnitId = 41
                        },
                        new
                        {
                            Id = 42,
                            StartTs = new DateTimeOffset(new DateTime(2020, 5, 15, 17, 16, 56, 859, DateTimeKind.Unspecified).AddTicks(5233), new TimeSpan(0, 3, 0, 0, 0)),
                            Status = 3,
                            UnitId = 42
                        });
                });

            modelBuilder.Entity("TaskManager.Entities.Tables.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("UnitType")
                        .HasColumnType("integer");

                    b.HasKey("UnitId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            UnitId = 1,
                            CreatorId = 2,
                            Description = "Create user api, spam list and blocking users",
                            Key = new Guid("dea2c6f6-3064-40fb-9f75-8e695939e839"),
                            Name = "CRUD API creating and deleting users",
                            UnitType = 3
                        },
                        new
                        {
                            UnitId = 2,
                            CreatorId = 2,
                            Description = "Modify database, add email service for client sales",
                            Key = new Guid("814d9772-ef7c-4eb9-a932-18dc89d4a0b4"),
                            Name = "Api for email subscriptions",
                            UnitType = 3
                        },
                        new
                        {
                            UnitId = 3,
                            CreatorId = 2,
                            Description = "Change behaviour from delete cascade to restrict and rework service deleting logic",
                            Key = new Guid("a7d245d0-3280-4ef5-9acb-6787bc194db7"),
                            Name = "Delete cascade",
                            UnitType = 3
                        },
                        new
                        {
                            UnitId = 4,
                            CreatorId = 2,
                            Description = "Plug in PayPal",
                            Key = new Guid("90992949-51c7-4ad1-aa92-086a1c57ba5d"),
                            Name = "Api for donations",
                            UnitType = 3
                        },
                        new
                        {
                            UnitId = 5,
                            CreatorId = 2,
                            Description = "Config docker compose with dotnet and postgres image and write integration tests for content with",
                            Key = new Guid("3310e655-5b08-493c-972c-13f668b5c57e"),
                            Name = "Testing content",
                            UnitType = 3
                        },
                        new
                        {
                            UnitId = 20,
                            CreatorId = 3,
                            Description = "Система отслеживания заданий. Выдача задания менеджером. Статус задания, согласно рабочему процессу. Процент выполнения. Почтовые уведомления клиентам системы. Управление пользователями и их ролями.",
                            Key = new Guid("bff26a36-6cb5-4cef-a7c4-939f6eaf76ca"),
                            Name = "TaskManager",
                            UnitType = 2
                        },
                        new
                        {
                            UnitId = 25,
                            CreatorId = 2,
                            Key = new Guid("32ae9833-13f7-4350-a68e-70e0bfeeca30"),
                            Name = "Create postgres image",
                            UnitType = 4
                        },
                        new
                        {
                            UnitId = 26,
                            CreatorId = 2,
                            Key = new Guid("02d0d799-c713-4d50-997a-c4b116192153"),
                            Name = "Create dotnet image",
                            UnitType = 4
                        },
                        new
                        {
                            UnitId = 40,
                            CreatorId = 2,
                            Key = new Guid("2da24682-8c31-4a23-b1e4-f979e8f80805"),
                            Name = "add doc document with api desc",
                            UnitType = 0
                        },
                        new
                        {
                            UnitId = 41,
                            CreatorId = 2,
                            Key = new Guid("d719805a-5c72-4473-8e6a-16b23120e185"),
                            Name = "we use postgres 11",
                            UnitType = 0
                        },
                        new
                        {
                            UnitId = 42,
                            CreatorId = 1,
                            Key = new Guid("2e5bc155-4842-4bf3-94de-36199204d917"),
                            Name = "Ok",
                            UnitType = 0
                        });
                });

            modelBuilder.Entity("TaskManager.Entities.Tables.Identity.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<int>");

                    b.HasDiscriminator().HasValue("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("TaskManager.Entities.Tables.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("TaskManager.Entities.Tables.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("TaskManager.Entities.Tables.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("TaskManager.Entities.Tables.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManager.Entities.Tables.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("TaskManager.Entities.Tables.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManager.Entities.Tables.Permission", b =>
                {
                    b.HasOne("TaskManager.Entities.Tables.ProjectMember", "ProjectMember")
                        .WithMany()
                        .HasForeignKey("ProjectMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManager.Entities.Tables.ProjectMember", null)
                        .WithMany("Permissions")
                        .HasForeignKey("ProjectMemberId1");

                    b.HasOne("TaskManager.Entities.Tables.Identity.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManager.Entities.Tables.Project", b =>
                {
                    b.HasOne("TaskManager.Entities.Tables.Identity.User", "ProjectManager")
                        .WithMany()
                        .HasForeignKey("ProjectManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManager.Entities.Tables.Unit", "Unit")
                        .WithOne()
                        .HasForeignKey("TaskManager.Entities.Tables.Project", "UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManager.Entities.Tables.ProjectMember", b =>
                {
                    b.HasOne("TaskManager.Entities.Tables.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManager.Entities.Tables.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManager.Entities.Tables.RelationShip", b =>
                {
                    b.HasOne("TaskManager.Entities.Tables.Unit", "ParentUnit")
                        .WithMany("SubUnits")
                        .HasForeignKey("ParentUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManager.Entities.Tables.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManager.Entities.Tables.TagOnTask", b =>
                {
                    b.HasOne("TaskManager.Entities.Tables.Tag", "Tag")
                        .WithMany("TagOnTasks")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManager.Entities.Tables.Task", "Task")
                        .WithMany("TagOnTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManager.Entities.Tables.Task", b =>
                {
                    b.HasOne("TaskManager.Entities.Tables.Identity.User", "Assigned")
                        .WithMany()
                        .HasForeignKey("AssignedId");

                    b.HasOne("TaskManager.Entities.Tables.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManager.Entities.Tables.Unit", "Unit")
                        .WithOne()
                        .HasForeignKey("TaskManager.Entities.Tables.Task", "UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManager.Entities.Tables.TermInfo", b =>
                {
                    b.HasOne("TaskManager.Entities.Tables.Unit", "Unit")
                        .WithOne("TermInfo")
                        .HasForeignKey("TaskManager.Entities.Tables.TermInfo", "UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManager.Entities.Tables.Unit", b =>
                {
                    b.HasOne("TaskManager.Entities.Tables.Identity.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
